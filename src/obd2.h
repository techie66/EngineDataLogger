/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.7 Thu Jul  7 21:18:08 2022.
 */

#ifndef OBD2_H
#define OBD2_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define OBD2_OBD2_REQUEST_FRAME_ID (0x7dfu)
#define OBD2_OBD2_ISO_TP_FRAME_ID (0x7e0u)
#define OBD2_OBD2_FRAME_ID (0x7e8u)

/* Frame lengths in bytes. */
#define OBD2_OBD2_REQUEST_LENGTH (8u)
#define OBD2_OBD2_ISO_TP_LENGTH (8u)
#define OBD2_OBD2_LENGTH (8u)

/* Extended or standard frame types. */
#define OBD2_OBD2_REQUEST_IS_EXTENDED (0)
#define OBD2_OBD2_ISO_TP_IS_EXTENDED (0)
#define OBD2_OBD2_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define OBD2_OBD2_SERVICE_SHOW_CURRENT_DATA__CHOICE (1u)
#define OBD2_OBD2_SERVICE_SHOW_FREEZE_FRAME_DATA__CHOICE (2u)
#define OBD2_OBD2_SERVICE_SHOW_STORED_DT_CS__CHOICE (3u)
#define OBD2_OBD2_SERVICE_CLEAR_DT_CS_AND_STORED_VALUES_CHOICE (4u)
#define OBD2_OBD2_SERVICE_OXYGEN_SENSOR_MONITORING__CHOICE (5u)
#define OBD2_OBD2_SERVICE_OTHER_SYSTEM_MONITORING__CHOICE (6u)
#define OBD2_OBD2_SERVICE_SHOW_PENDING_DT_CS__CHOICE (7u)
#define OBD2_OBD2_SERVICE_CONTROL_ON_BOARD_SYSTEM__CHOICE (8u)
#define OBD2_OBD2_SERVICE_REQUEST_VEHICLE_INFORMATION__CHOICE (9u)
#define OBD2_OBD2_SERVICE_PERMANENT_DT_CS___CLEARED_DT_CS___CHOICE (10u)

#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_00_PI_DS_SUPPORTED_01_20_CHOICE (0u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_01_MONITOR_STATUS_CHOICE (1u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_02_FREEZE_DTC_CHOICE (2u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_03_FUEL_SYSTEM_STATUS_CHOICE (3u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_04_CALC_ENGINE_LOAD_CHOICE (4u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_05_ENGINE_COOLANT_TEMP_CHOICE (5u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_06_SHORT_FUEL_TRIM_BANK1_CHOICE (6u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_07_LONG_FUEL_TRIM_BANK1_CHOICE (7u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_08_SHORT_FUEL_TRIM_BANK2_CHOICE (8u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_09_LONG_FUEL_TRIM_BANK2_CHOICE (9u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_0_A_FUEL_PRESSURE_CHOICE (10u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_0_B_INTAKE_MANI_ABS_PRESS_CHOICE (11u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_0_C_ENGINE_RPM_CHOICE (12u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_0_D_VEHICLE_SPEED_CHOICE (13u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_0_E_TIMING_ADVANCE_CHOICE (14u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_0_F_INTAKE_AIR_TEMPERATURE_CHOICE (15u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_10_MAF_AIR_FLOW_RATE_CHOICE (16u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_11_THROTTLE_POSITION_CHOICE (17u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_12_CMD_SEC_AIR_STATUS_CHOICE (18u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_14_OXY_SENSOR1_CHOICE (20u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_15_OXY_SENSOR2_CHOICE (21u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_16_OXY_SENSOR3_CHOICE (22u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_17_OXY_SENSOR4_CHOICE (23u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_18_OXY_SENSOR5_CHOICE (24u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_19_OXY_SENSOR6_CHOICE (25u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_1_A_OXY_SENSOR7_CHOICE (26u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_1_B_OXY_SENSOR8_CHOICE (27u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_1_C_OBD_STANDARD_CHOICE (28u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_1_F_TIME_SINCE_ENG_START_CHOICE (31u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_20_PI_DS_SUPPORTED_21_40_CHOICE (32u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_21_DISTANCE_MIL_ON_CHOICE (33u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_22_FUEL_RAIL_PRES_CHOICE (34u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_23_FUEL_RAIL_GAUG_CHOICE (35u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_24_OXY_SENSOR1_CHOICE (36u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_25_OXY_SENSOR2_CHOICE (37u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_26_OXY_SENSOR3_CHOICE (38u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_27_OXY_SENSOR4_CHOICE (39u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_28_OXY_SENSOR5_CHOICE (40u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_29_OXY_SENSOR6_CHOICE (41u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_2_A_OXY_SENSOR7_CHOICE (42u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_2_B_OXY_SENSOR8_CHOICE (43u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_2_C_CMD_EGR_CHOICE (44u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_2_D_EGR_ERROR_CHOICE (45u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_2_E_CMD_EVAP_PURGE_CHOICE (46u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_2_F_FUEL_TANK_LEVEL_CHOICE (47u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_30_WARM_UPS_SINCE_CODE_CLEAR_CHOICE (48u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_31_DISTANCE_SINCE_CODE_CLEAR_CHOICE (49u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_32_EVAP_SYS_VAPOR_PRES_CHOICE (50u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_33_ABS_BARO_PRES_CHOICE (51u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_34_OXY_SENSOR1_CHOICE (52u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_35_OXY_SENSOR2_CHOICE (53u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_36_OXY_SENSOR3_CHOICE (54u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_37_OXY_SENSOR4_CHOICE (55u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_38_OXY_SENSOR5_CHOICE (56u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_39_OXY_SENSOR6_CHOICE (57u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_3_A_OXY_SENSOR7_CHOICE (58u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_3_B_OXY_SENSOR8_CHOICE (59u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_3_C_CAT_TEMP_BANK1_SENS1_CHOICE (60u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_3_D_CAT_TEMP_BANK2_SENS1_CHOICE (61u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_3_E_CAT_TEMP_BANK1_SENS2_CHOICE (62u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_3_F_CAT_TEMP_BANK2_SENS2_CHOICE (63u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_40_PI_DS_SUPPORTED_41_60_CHOICE (64u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_41_MON_STATUS_DRIVE_CYCLE_CHOICE (65u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_42_CONTROL_MODULE_VOLT_CHOICE (66u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_43_ABS_LOAD_VALUE_CHOICE (67u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_44_FUEL_AIR_CMD_EQUIV_CHOICE (68u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_45_REL_THROTTLE_POS_CHOICE (69u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_46_AMBIENT_AIR_TEMP_CHOICE (70u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_47_ABS_THROTTLE_POS_B_CHOICE (71u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_48_ABS_THROTTLE_POS_C_CHOICE (72u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_49_ABS_THROTTLE_POS_D_CHOICE (73u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_4_A_ABS_THROTTLE_POS_E_CHOICE (74u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_4_B_ABS_THROTTLE_POS_F_CHOICE (75u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_4_C_CMD_THROTTLE_ACT_CHOICE (76u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_4_D_TIME_RUN_MIL_ON_CHOICE (77u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_4_E_TIME_SINCE_CODE_CLEAR_CHOICE (78u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_4_F_MAX_MULTIPLE_CHOICE (79u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_50_MAX_AIR_FLOW_MAF_CHOICE (80u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_51_FUEL_TYPE_CHOICE (81u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_52_ETHANOL_FUEL_PCT_CHOICE (82u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_53_ABS_EVAP_SYS_VAP_PRES_CHOICE (83u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_54_EVAP_SYS_VAP_PRES_CHOICE (84u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_55_SHORT_SEC_OXY_TRIM_BANK_X_CHOICE (85u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_56_LONG_SEC_OXY_TRIM_BANK_X_CHOICE (86u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_57_SHORT_SEC_OXY_TRIM_BANK_X_CHOICE (87u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_58_LONG_SEC_OXY_TRIM_BANK_X_CHOICE (88u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_59_FUEL_RAIL_ABS_PRES_CHOICE (89u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_5_A_REL_ACCEL_PEDAL_POS_CHOICE (90u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_5_B_HYBR_BAT_PACK_REM_LIFE_CHOICE (91u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_5_C_ENGINE_OIL_TEMP_CHOICE (92u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_5_D_FUEL_INJECTION_TIMING_CHOICE (93u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_5_E_ENGINE_FUEL_RATE_CHOICE (94u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_5_F_EMISSION_REQ_CHOICE (95u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_60_PI_DS_SUPPORTED_61_80_CHOICE (96u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_61_DEMAND_ENG_TORQ_PCT_CHOICE (97u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_62_ACTUAL_ENG_TORQ_PCT_CHOICE (98u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_63_ENG_REF_TORQ_CHOICE (99u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_64_ENG_PCT_TORQ_CHOICE (100u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_65_AUX_INPUT_OUTPUT_CHOICE (101u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_66_MAF_SENSOR_CHOICE (102u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_67_ENGINE_COOLANT_TEMP_CHOICE (103u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_68_INTAKE_AIR_TEMP_SENS_CHOICE (104u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_69_CMD_EGR_EGR_ERROR_CHOICE (105u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_6_A_CMD_DIESEL_INT_AIR_CHOICE (106u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_6_B_EXHAUST_GAS_TEMP_CHOICE (107u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_6_C_CMD_THROTTLE_ACT_REL_CHOICE (108u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_6_D_FUEL_PRES_CONTR_SYS_CHOICE (109u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_6_E_INJ_PRES_CONTR_SYS_CHOICE (110u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_6_F_TURBO_COMPR_PRES_CHOICE (111u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_70_BOOST_PRES_CNTRL_CHOICE (112u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_80_PI_DS_SUPPORTED_81_A0_CHOICE (128u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_8_E_ENG_FRICTION_PCT_TORQ_CHOICE (142u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_A0_PI_DS_SUPPORTED_A1_C0_CHOICE (160u)
#define OBD2_OBD2_PARAMETER_ID_SERVICE01_S1_PID_C0_PI_DS_SUPPORTED_C1_E0_CHOICE (192u)

#define OBD2_OBD2_PARAMETER_ID_SERVICE02_S2_PID_02_FREEZE_DTC_CHOICE (2u)

#define OBD2_OBD2_S1_PID_03_FUEL_SYSTEM_STATUS_OPEN_LOOP__INSUFF__ENG__TEMP___CHOICE (1u)
#define OBD2_OBD2_S1_PID_03_FUEL_SYSTEM_STATUS_CLOSED_LOOP__OXY_SENS__CHOICE (2u)
#define OBD2_OBD2_S1_PID_03_FUEL_SYSTEM_STATUS_OPEN_LOOP__ENG__LOAD__FUEL_CUT__CHOICE (4u)
#define OBD2_OBD2_S1_PID_03_FUEL_SYSTEM_STATUS_OPEN_LOOP__SYSTEM_FAILURE__CHOICE (8u)
#define OBD2_OBD2_S1_PID_03_FUEL_SYSTEM_STATUS_CLOSED_LOOP__FEEDBACK_ISSUE__CHOICE (16u)

#define OBD2_OBD2_S1_PID_12_CMD_SEC_AIR_STATUS_UPSTREAM_CHOICE (1u)
#define OBD2_OBD2_S1_PID_12_CMD_SEC_AIR_STATUS_DOWNSTREAM_CATALYTIC_CONV_CHOICE (2u)
#define OBD2_OBD2_S1_PID_12_CMD_SEC_AIR_STATUS_FROM_OUTSIDE_ATMOSPHERE_OFF_CHOICE (4u)
#define OBD2_OBD2_S1_PID_12_CMD_SEC_AIR_STATUS_PUMP_CMD_ON_FOR_DIAGN__CHOICE (8u)

#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_OBD_II_AS_DEFINED_BY_THE_CARB_CHOICE (1u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_OBD_AS_DEFINED_BY_THE_EPA_CHOICE (2u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_OBD_AND_OBD_II_CHOICE (3u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_OBD_I_CHOICE (4u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_NOT_OBD_COMPLIANT_CHOICE (5u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_EOBD___EUROPE__CHOICE (6u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_EOBD_AND_OBD_II_CHOICE (7u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_EOBD_AND_OBD_CHOICE (8u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_EOBD__OBD_AND_OBD_II_CHOICE (9u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_JOBD___JAPAN__CHOICE (10u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_JOBD_AND_OBD_II_CHOICE (11u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_JOBD_AND_EOBD_CHOICE (12u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_JOBD__EOBD__AND_OBD_II_CHOICE (13u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_RESERVED_14_CHOICE (14u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_RESERVED_15_CHOICE (15u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_RESERVED_16_CHOICE (16u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_ENG___MANU___DIAG___EMD__CHOICE (17u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_EMD__ENHANCED__EMD___CHOICE (18u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_HD_OBD_C_CHOICE (19u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_HD_OBD_CHOICE (20u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_WWH_OBD_CHOICE (21u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_RESERVED_22_CHOICE (22u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_HD_EOBD_I_CHOICE (23u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_HD_EOBD_I_N_CHOICE (24u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_HD_EOBD_II_CHOICE (25u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_HD_EOBD_II_N_CHOICE (26u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_RESERVED_27_CHOICE (27u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_OBD_BR_1_CHOICE (28u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_OBD_BR_2_CHOICE (29u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_KOBD_CHOICE (30u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_IOBD_I_CHOICE (31u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_IOBD_II_CHOICE (32u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_HD_EOBD_IV_CHOICE (33u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_RESERVED_34_CHOICE (34u)
#define OBD2_OBD2_S1_PID_1_C_OBD_STANDARD_RESERVED_35_CHOICE (35u)

#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_NOT_AVAILABLE_CHOICE (0u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_GASOLINE_CHOICE (1u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_METHANOL_CHOICE (2u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_ETHANOL_CHOICE (3u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_DIESEL_CHOICE (4u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_LPG_CHOICE (5u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_CNG_CHOICE (6u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_PROPANE_CHOICE (7u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_ELECTRIC_CHOICE (8u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_BIFUEL_RUNNING__GASOLINE_CHOICE (9u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_BIFUEL_RUNNING__METHANOL_CHOICE (10u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_BIFUEL_RUNNING__ETHANOL_CHOICE (11u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_BIFUEL_RUNNING_LPG_CHOICE (12u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_BIFUEL_RUNNING_CNG_CHOICE (13u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_BIFUEL_RUNNING__PROPANE_CHOICE (14u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_BIFUEL_RUNNING__ELECTRICITY_CHOICE (15u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_BIFUEL_ELECTRIC_COMB__ENG__CHOICE (16u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_HYBRID_GASOLINE_CHOICE (17u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_HYBRID__ETHANOL_CHOICE (18u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_HYBRID__DIESEL_CHOICE (19u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_HYBRID__ELECTRIC_CHOICE (20u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_HYBRID_RUNNING_ELECTRIC_COMB__CHOICE (21u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_HYBRID__REGENERATIVE_CHOICE (22u)
#define OBD2_OBD2_S1_PID_51_FUEL_TYPE_BIFUEL_RUNNING_DIESEL_CHOICE (23u)

/**
 * Signals in message OBD2_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct obd2_obd2_request_t {
  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t mode;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t pid;
};

/**
 * Signals in message OBD2_ISO_TP.
 *
 * All signal values are as on the CAN bus.
 */
struct obd2_obd2_iso_tp_t {
  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t type;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t sf_size;

  /**
   * Range: 8..4095 (8..4095 -)
   * Scale: 1
   * Offset: 0
   */
  uint16_t ff_size;

  /**
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t cf_index;

  /**
   * Range: 0..2 (0..2 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t fc_flag;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t fc_block_size;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t fc_st;

  /**
   * Range: 0..127 (0..127 ms)
   * Scale: 1
   * Offset: 0
   */
  uint8_t fc_st_ms;

  /**
   * Range: 7..7 (7..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t fc_st_us_mux;

  /**
   * Range: 1..9 (100..900 us)
   * Scale: 100
   * Offset: 0
   */
  uint8_t fc_st_us;
};

/**
 * Signals in message OBD2.
 *
 * OBD2 DBC developed by canmatrix & CSS Electronics - for questions contact us at www.csselectronics.com
 *
 * All signal values are as on the CAN bus.
 */
struct obd2_obd2_t {
  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t length;

  /**
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t response;

  /**
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t service;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t parameter_id_service01;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t parameter_id_service02;

  /**
   * PIDs supported [01 - 20] - Bit encoded [A7..D0] == [PID $01..PID $20]. See OBD-II PIDs on Wikipedia
   *
   * Range: 0..4294967295 (0..4294967295 -)
   * Scale: 1
   * Offset: 0
   */
  uint32_t s1_pid_00_pi_ds_supported_01_20;

  /**
   * Monitor status since DTCs cleared (includes malfunction indicator lamp (MIL) status and number of DTCs)
   *
   * Range: 0..4294967295 (0..4294967295 -)
   * Scale: 1
   * Offset: 0
   */
  uint32_t s1_pid_01_monitor_status;

  /**
   * Range: 0..65535 (0..65535 -)
   * Scale: 1
   * Offset: 0
   */
  uint16_t s1_pid_02_freeze_dtc;

  /**
   * Range: 0..65535 (0..65535 -)
   * Scale: 1
   * Offset: 0
   */
  uint16_t s1_pid_03_fuel_system_status;

  /**
   * Range: 0..254.9979600163198694410444716 (0..100 %)
   * Scale: 0.39216
   * Offset: 0
   */
  uint8_t s1_pid_04_calc_engine_load;

  /**
   * Range: 0..255 (-40..215 degC)
   * Scale: 1
   * Offset: -40
   */
  uint8_t s1_pid_05_engine_coolant_temp;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_06_short_fuel_trim_bank1;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_07_long_fuel_trim_bank1;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_08_short_fuel_trim_bank2;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_09_long_fuel_trim_bank2;

  /**
   * Range: 0..255 (0..765 kPa)
   * Scale: 3
   * Offset: 0
   */
  uint8_t s1_pid_0_a_fuel_pressure;

  /**
   * Range: 0..255 (0..255 kPa)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_0_b_intake_mani_abs_press;

  /**
   * Range: 0..65535 (0..16383.75 rpm)
   * Scale: 0.25
   * Offset: 0
   */
  uint16_t s1_pid_0_c_engine_rpm;

  /**
   * Range: 0..255 (0..255 km/h)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_0_d_vehicle_speed;

  /**
   * Range: 0..255 (-64..63.5 deg before TDC)
   * Scale: 0.5
   * Offset: -64
   */
  uint8_t s1_pid_0_e_timing_advance;

  /**
   * Range: 0..255 (-40..215 degC)
   * Scale: 1
   * Offset: -40
   */
  uint8_t s1_pid_0_f_intake_air_temperature;

  /**
   * Range: 0..65535 (0..655.35 grams/sec)
   * Scale: 0.01
   * Offset: 0
   */
  uint16_t s1_pid_10_maf_air_flow_rate;

  /**
   * Range: 0..254.9979600163198694410444716 (0..100 %)
   * Scale: 0.39216
   * Offset: 0
   */
  uint8_t s1_pid_11_throttle_position;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_12_cmd_sec_air_status;

  /**
   * Range: 0..255 (0..1.275 volts)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t s1_pid_14_oxy_sensor1_volt;

  /**
   * Range: 0..255 (0..1.275 volts)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t s1_pid_15_oxy_sensor2_volt;

  /**
   * Range: 0..255 (0..1.275 volts)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t s1_pid_16_oxy_sensor3_volt;

  /**
   * Range: 0..255 (0..1.275 volts)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t s1_pid_17_oxy_sensor4_volt;

  /**
   * Range: 0..255 (0..1.275 volts)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t s1_pid_18_oxy_sensor5_volt;

  /**
   * Range: 0..255 (0..1.275 volts)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t s1_pid_19_oxy_sensor6_volt;

  /**
   * Range: 0..255 (0..1.275 volts)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t s1_pid_1_a_oxy_sensor7_volt;

  /**
   * Range: 0..255 (0..1.275 volts)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t s1_pid_1_b_oxy_sensor8_volt;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_1_c_obd_standard;

  /**
   * Range: 0..65535 (0..65535 seconds)
   * Scale: 1
   * Offset: 0
   */
  uint16_t s1_pid_1_f_time_since_eng_start;

  /**
   * PIDs supported [21 - 40] - Bit encoded [A7..D0] == [PID $21..PID $40]. See OBD-II PIDs on Wikipedia
   *
   * Range: 0..4294967295 (0..4294967295 -)
   * Scale: 1
   * Offset: 0
   */
  uint32_t s1_pid_20_pi_ds_supported_21_40;

  /**
   * Range: 0..65535 (0..65535 km)
   * Scale: 1
   * Offset: 0
   */
  uint16_t s1_pid_21_distance_mil_on;

  /**
   * Range: 0..65535 (0..5177.265 kPa)
   * Scale: 0.079
   * Offset: 0
   */
  uint16_t s1_pid_22_fuel_rail_pres;

  /**
   * Range: 0..65535 (0..655350 kPa)
   * Scale: 10
   * Offset: 0
   */
  uint16_t s1_pid_23_fuel_rail_gaug;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_24_oxy_sensor1_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_25_oxy_sensor2_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_26_oxy_sensor3_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_27_oxy_sensor4_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_28_oxy_sensor5_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_29_oxy_sensor6_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_2_a_oxy_sensor7_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_2_b_oxy_sensor8_faer;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_2_c_cmd_egr;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_2_d_egr_error;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_2_e_cmd_evap_purge;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_2_f_fuel_tank_level;

  /**
   * Range: 0..255 (0..255 count)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_30_warm_ups_since_code_clear;

  /**
   * Range: 0..65535 (0..65535 km)
   * Scale: 1
   * Offset: 0
   */
  uint16_t s1_pid_31_distance_since_code_clear;

  /**
   * Range: -32768..32767 (-8192..8191.75 Pa)
   * Scale: 0.25
   * Offset: 0
   */
  int16_t s1_pid_32_evap_sys_vapor_pres;

  /**
   * Range: 0..255 (0..255 kPa)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_33_abs_baro_pres;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_34_oxy_sensor1_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_35_oxy_sensor2_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_36_oxy_sensor3_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_37_oxy_sensor4_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_38_oxy_sensor5_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_39_oxy_sensor6_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_3_a_oxy_sensor7_faer;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_3_b_oxy_sensor8_faer;

  /**
   * Range: 0..65535 (-40..6513.5 degC)
   * Scale: 0.1
   * Offset: -40
   */
  uint16_t s1_pid_3_c_cat_temp_bank1_sens1;

  /**
   * Range: 0..65535 (-40..6513.5 degC)
   * Scale: 0.1
   * Offset: -40
   */
  uint16_t s1_pid_3_d_cat_temp_bank2_sens1;

  /**
   * Range: 0..65535 (-40..6513.5 degC)
   * Scale: 0.1
   * Offset: -40
   */
  uint16_t s1_pid_3_e_cat_temp_bank1_sens2;

  /**
   * Range: 0..65535 (-40..6513.5 degC)
   * Scale: 0.1
   * Offset: -40
   */
  uint16_t s1_pid_3_f_cat_temp_bank2_sens2;

  /**
   * PIDs supported [41 - 60] - Bit encoded [A7..D0] == [PID $41..PID $60]. See OBD-II PIDs on Wikipedia
   *
   * Range: 0..4294967295 (0..4294967295 -)
   * Scale: 1
   * Offset: 0
   */
  uint32_t s1_pid_40_pi_ds_supported_41_60;

  /**
   * Range: 0..4294967295 (0..4294967295 -)
   * Scale: 1
   * Offset: 0
   */
  uint32_t s1_pid_41_mon_status_drive_cycle;

  /**
   * Range: 0..65535 (0..65.535 V)
   * Scale: 0.001
   * Offset: 0
   */
  uint16_t s1_pid_42_control_module_volt;

  /**
   * Range: 0..65535.00000000000655350000000 (0..25700 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint16_t s1_pid_43_abs_load_value;

  /**
   * Range: 0..65536 (0..2 ratio)
   * Scale: 3.0517578125e-05
   * Offset: 0
   */
  uint16_t s1_pid_44_fuel_air_cmd_equiv;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_45_rel_throttle_pos;

  /**
   * Range: 0..255 (-40..215 degC)
   * Scale: 1
   * Offset: -40
   */
  uint8_t s1_pid_46_ambient_air_temp;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_47_abs_throttle_pos_b;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_48_abs_throttle_pos_c;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_49_abs_throttle_pos_d;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_4_a_abs_throttle_pos_e;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_4_b_abs_throttle_pos_f;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_4_c_cmd_throttle_act;

  /**
   * Range: 0..65535 (0..65535 minutes)
   * Scale: 1
   * Offset: 0
   */
  uint16_t s1_pid_4_d_time_run_mil_on;

  /**
   * Range: 0..65535 (0..65535 minutes)
   * Scale: 1
   * Offset: 0
   */
  uint16_t s1_pid_4_e_time_since_code_clear;

  /**
   * Range: 0..255 (0..255 ratio)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_4_f_max_faer;

  /**
   * Range: 0..255 (0..2550 g/s)
   * Scale: 10
   * Offset: 0
   */
  uint8_t s1_pid_50_max_air_flow_maf;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_51_fuel_type;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_52_ethanol_fuel_pct;

  /**
   * Range: 0..65535 (0..327.675 kPa)
   * Scale: 0.005
   * Offset: 0
   */
  uint16_t s1_pid_53_abs_evap_sys_vap_pres;

  /**
   * Range: 0..65535 (-32767..32768 Pa)
   * Scale: 1
   * Offset: -32767
   */
  uint16_t s1_pid_54_evap_sys_vap_pres;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_55_short_sec_oxy_trim_bank1;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_56_long_sec_oxy_trim_bank1;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_57_short_sec_oxy_trim_bank2;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_58_long_sec_oxy_trim_bank2;

  /**
   * Range: 0..65535 (0..655350 kPa)
   * Scale: 10
   * Offset: 0
   */
  uint16_t s1_pid_59_fuel_rail_abs_pres;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_5_a_rel_accel_pedal_pos;

  /**
   * Range: 0..255.0000000000000255000000000 (0..100 %)
   * Scale: 0.392156862745098
   * Offset: 0
   */
  uint8_t s1_pid_5_b_hybr_bat_pack_rem_life;

  /**
   * Range: 0..255 (-40..215 degC)
   * Scale: 1
   * Offset: -40
   */
  uint8_t s1_pid_5_c_engine_oil_temp;

  /**
   * Range: 0..65535 (-210..301.9921875 deg)
   * Scale: 0.0078125
   * Offset: -210
   */
  uint16_t s1_pid_5_d_fuel_injection_timing;

  /**
   * Range: 0..65535 (0..3276.75 L/h)
   * Scale: 0.05
   * Offset: 0
   */
  uint16_t s1_pid_5_e_engine_fuel_rate;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_5_f_emission_req;

  /**
   * PIDs supported [61 - 80] - Bit encoded [A7..D0] == [PID $61..PID $80]. See OBD-II PIDs on Wikipedia
   *
   * Range: 0..4294967295 (0..4294967295 -)
   * Scale: 1
   * Offset: 0
   */
  uint32_t s1_pid_60_pi_ds_supported_61_80;

  /**
   * Range: 0..255 (-125..130 %)
   * Scale: 1
   * Offset: -125
   */
  uint8_t s1_pid_61_demand_eng_torq_pct;

  /**
   * Range: 0..255 (-125..130 %)
   * Scale: 1
   * Offset: -125
   */
  uint8_t s1_pid_62_actual_eng_torq_pct;

  /**
   * Range: 0..65535 (0..65535 Nm)
   * Scale: 1
   * Offset: 0
   */
  uint16_t s1_pid_63_eng_ref_torq;

  /**
   * Range: 0..255 (-125..130 %)
   * Scale: 1
   * Offset: -125
   */
  uint8_t s1_pid_64_eng_pct_torq_idle;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_65_aux_input_output;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_66_maf_sensor;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_67_engine_coolant_temp;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_68_intake_air_temp_sens;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_69_cmd_egr_egr_error;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_6_a_cmd_diesel_int_air;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_6_b_exhaust_gas_temp;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_6_c_cmd_throttle_act_rel;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_6_d_fuel_pres_contr_sys;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_6_e_inj_pres_contr_sys;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_6_f_turbo_compr_pres;

  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_70_boost_pres_cntrl;

  /**
   * PIDs supported [81 - A0] - Bit encoded [A7..D0] == [PID $81..PID $A0]. See OBD-II PIDs on Wikipedia
   *
   * Range: 0..4294967295 (0..4294967295 -)
   * Scale: 1
   * Offset: 0
   */
  uint32_t s1_pid_80_pi_ds_supported_81_a0;

  /**
   * Range: 0..255 (-125..130 %)
   * Scale: 1
   * Offset: -125
   */
  uint8_t s1_pid_8_e_eng_friction_pct_torq;

  /**
   * PIDs supported [A1 - C0] - Bit encoded [A7..D0] == [PID $A1..PID $C0]. See OBD-II PIDs on Wikipedia
   *
   * Range: 0..4294967295 (0..4294967295 -)
   * Scale: 1
   * Offset: 0
   */
  uint32_t s1_pid_a0_pi_ds_supported_a1_c0;

  /**
   * PIDs supported [C1 - E0] - Bit encoded [A7..D0] == [PID $C1..PID $E0]. See OBD-II PIDs on Wikipedia
   *
   * Range: 0..4294967295 (0..4294967295 -)
   * Scale: 1
   * Offset: 0
   */
  uint32_t s1_pid_c0_pi_ds_supported_c1_e0;

  /**
   * Range: 0..65535 (0..65535 -)
   * Scale: 1
   * Offset: 0
   */
  uint16_t s2_pid_02_freeze_dtc;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_14_oxy_sensor1_stft;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_15_oxy_sensor2_stft;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_16_oxy_sensor3_stft;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_17_oxy_sensor4_stft;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_18_oxy_sensor5_stft;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_19_oxy_sensor6_stft;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_1_a_oxy_sensor7_stft;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_1_b_oxy_sensor8_stft;

  /**
   * Range: 0..255 (0..255 V)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_4_f_max_oxy_sens_vol;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_55_short_sec_oxy_trim_bank3;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_56_long_sec_oxy_trim_bank3;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_57_short_sec_oxy_trim_bank4;

  /**
   * Range: 0..255 (-100..99.21875 %)
   * Scale: 0.78125
   * Offset: -100
   */
  uint8_t s1_pid_58_long_sec_oxy_trim_bank4;

  /**
   * Range: 0..255 (-125..130 %)
   * Scale: 1
   * Offset: -125
   */
  uint8_t s1_pid_64_eng_pct_torq_ep1;

  /**
   * Range: 0..16384 (0..2 volts)
   * Scale: 0.0001220703125
   * Offset: 0
   */
  uint16_t s1_pid_24_oxy_sensor1_volt;

  /**
   * Range: 0..65536 (0..8 volts)
   * Scale: 0.0001220703125
   * Offset: 0
   */
  uint16_t s1_pid_25_oxy_sensor2_volt;

  /**
   * Range: 0..65536 (0..8 volts)
   * Scale: 0.0001220703125
   * Offset: 0
   */
  uint16_t s1_pid_26_oxy_sensor3_volt;

  /**
   * Range: 0..65536 (0..8 volts)
   * Scale: 0.0001220703125
   * Offset: 0
   */
  uint16_t s1_pid_27_oxy_sensor4_volt;

  /**
   * Range: 0..65536 (0..8 volts)
   * Scale: 0.0001220703125
   * Offset: 0
   */
  uint16_t s1_pid_28_oxy_sensor5_volt;

  /**
   * Range: 0..65536 (0..8 volts)
   * Scale: 0.0001220703125
   * Offset: 0
   */
  uint16_t s1_pid_29_oxy_sensor6_volt;

  /**
   * Range: 0..65536 (0..8 volts)
   * Scale: 0.0001220703125
   * Offset: 0
   */
  uint16_t s1_pid_2_a_oxy_sensor7_volt;

  /**
   * Range: 0..65536 (0..8 volts)
   * Scale: 0.0001220703125
   * Offset: 0
   */
  uint16_t s1_pid_2_b_oxy_sensor8_volt;

  /**
   * Range: 0..65536 (-128..128 mA)
   * Scale: 0.00390625
   * Offset: -128
   */
  uint16_t s1_pid_34_oxy_sensor1_crnt;

  /**
   * Range: 0..65536 (-128..128 mA)
   * Scale: 0.00390625
   * Offset: -128
   */
  uint16_t s1_pid_35_oxy_sensor2_crnt;

  /**
   * Range: 0..65536 (-128..128 mA)
   * Scale: 0.00390625
   * Offset: -128
   */
  uint16_t s1_pid_36_oxy_sensor3_crnt;

  /**
   * Range: 0..65536 (-128..128 mA)
   * Scale: 0.00390625
   * Offset: -128
   */
  uint16_t s1_pid_37_oxy_sensor4_crnt;

  /**
   * Range: 0..65536 (-128..128 mA)
   * Scale: 0.00390625
   * Offset: -128
   */
  uint16_t s1_pid_38_oxy_sensor5_crnt;

  /**
   * Range: 0..65536 (-128..128 mA)
   * Scale: 0.00390625
   * Offset: -128
   */
  uint16_t s1_pid_39_oxy_sensor6_crnt;

  /**
   * Range: 0..65536 (-128..128 mA)
   * Scale: 0.00390625
   * Offset: -128
   */
  uint16_t s1_pid_3_a_oxy_sensor7_crnt;

  /**
   * Range: 0..65536 (-128..128 mA)
   * Scale: 0.00390625
   * Offset: -128
   */
  uint16_t s1_pid_3_b_oxy_sensor8_crnt;

  /**
   * Range: 0..255 (0..255 mA)
   * Scale: 1
   * Offset: 0
   */
  uint8_t s1_pid_4_f_max_oxy_sens_crnt;

  /**
   * Range: 0..255 (-125..130 %)
   * Scale: 1
   * Offset: -125
   */
  uint8_t s1_pid_64_eng_pct_torq_ep2;

  /**
   * Range: 0..255 (0..2550 kPa)
   * Scale: 10
   * Offset: 0
   */
  uint8_t s1_pid_4_f_max_int_mani_abs_pres;

  /**
   * Range: 0..255 (-125..130 %)
   * Scale: 1
   * Offset: -125
   */
  uint8_t s1_pid_64_eng_pct_torq_ep3;

  /**
   * Range: 0..255 (-125..130 %)
   * Scale: 1
   * Offset: -125
   */
  uint8_t s1_pid_64_eng_pct_torq_ep4;
};

/**
 * Pack message OBD2_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int obd2_obd2_request_pack(
  uint8_t *dst_p,
  const struct obd2_obd2_request_t *src_p,
  size_t size);

/**
 * Unpack message OBD2_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int obd2_obd2_request_unpack(
  struct obd2_obd2_request_t *dst_p,
  const uint8_t *src_p,
  size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_request_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_request_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_request_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_request_pid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_request_pid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_request_pid_is_in_range(uint8_t value);

/**
 * Pack message OBD2_ISO_TP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int obd2_obd2_iso_tp_pack(
  uint8_t *dst_p,
  const struct obd2_obd2_iso_tp_t *src_p,
  size_t size);

/**
 * Unpack message OBD2_ISO_TP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int obd2_obd2_iso_tp_unpack(
  struct obd2_obd2_iso_tp_t *dst_p,
  const uint8_t *src_p,
  size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_iso_tp_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_iso_tp_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_iso_tp_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_iso_tp_sf_size_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_iso_tp_sf_size_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_iso_tp_sf_size_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_iso_tp_ff_size_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_iso_tp_ff_size_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_iso_tp_ff_size_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_iso_tp_cf_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_iso_tp_cf_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_iso_tp_cf_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_iso_tp_fc_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_iso_tp_fc_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_iso_tp_fc_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_iso_tp_fc_block_size_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_iso_tp_fc_block_size_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_iso_tp_fc_block_size_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_iso_tp_fc_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_iso_tp_fc_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_iso_tp_fc_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_iso_tp_fc_st_ms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_iso_tp_fc_st_ms_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_iso_tp_fc_st_ms_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_iso_tp_fc_st_us_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_iso_tp_fc_st_us_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_iso_tp_fc_st_us_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_iso_tp_fc_st_us_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_iso_tp_fc_st_us_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_iso_tp_fc_st_us_is_in_range(uint8_t value);

/**
 * Pack message OBD2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int obd2_obd2_pack(
  uint8_t *dst_p,
  const struct obd2_obd2_t *src_p,
  size_t size);

/**
 * Unpack message OBD2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int obd2_obd2_unpack(
  struct obd2_obd2_t *dst_p,
  const uint8_t *src_p,
  size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_response_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_response_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_service_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_service_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_service_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_parameter_id_service01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_parameter_id_service01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_parameter_id_service01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_parameter_id_service02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_parameter_id_service02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_parameter_id_service02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t obd2_obd2_s1_pid_00_pi_ds_supported_01_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_00_pi_ds_supported_01_20_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_00_pi_ds_supported_01_20_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t obd2_obd2_s1_pid_01_monitor_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_01_monitor_status_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_01_monitor_status_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_02_freeze_dtc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_02_freeze_dtc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_02_freeze_dtc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_03_fuel_system_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_03_fuel_system_status_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_03_fuel_system_status_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_04_calc_engine_load_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_04_calc_engine_load_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_04_calc_engine_load_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_05_engine_coolant_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_05_engine_coolant_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_05_engine_coolant_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_06_short_fuel_trim_bank1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_06_short_fuel_trim_bank1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_06_short_fuel_trim_bank1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_07_long_fuel_trim_bank1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_07_long_fuel_trim_bank1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_07_long_fuel_trim_bank1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_08_short_fuel_trim_bank2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_08_short_fuel_trim_bank2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_08_short_fuel_trim_bank2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_09_long_fuel_trim_bank2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_09_long_fuel_trim_bank2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_09_long_fuel_trim_bank2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_0_a_fuel_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_0_a_fuel_pressure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_0_a_fuel_pressure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_0_b_intake_mani_abs_press_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_0_b_intake_mani_abs_press_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_0_b_intake_mani_abs_press_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_0_c_engine_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_0_c_engine_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_0_c_engine_rpm_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_0_d_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_0_d_vehicle_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_0_d_vehicle_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_0_e_timing_advance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_0_e_timing_advance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_0_e_timing_advance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_0_f_intake_air_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_0_f_intake_air_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_0_f_intake_air_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_10_maf_air_flow_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_10_maf_air_flow_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_10_maf_air_flow_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_11_throttle_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_11_throttle_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_11_throttle_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_12_cmd_sec_air_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_12_cmd_sec_air_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_12_cmd_sec_air_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_14_oxy_sensor1_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_14_oxy_sensor1_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_14_oxy_sensor1_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_15_oxy_sensor2_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_15_oxy_sensor2_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_15_oxy_sensor2_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_16_oxy_sensor3_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_16_oxy_sensor3_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_16_oxy_sensor3_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_17_oxy_sensor4_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_17_oxy_sensor4_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_17_oxy_sensor4_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_18_oxy_sensor5_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_18_oxy_sensor5_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_18_oxy_sensor5_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_19_oxy_sensor6_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_19_oxy_sensor6_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_19_oxy_sensor6_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_1_a_oxy_sensor7_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_1_a_oxy_sensor7_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_1_a_oxy_sensor7_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_1_b_oxy_sensor8_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_1_b_oxy_sensor8_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_1_b_oxy_sensor8_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_1_c_obd_standard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_1_c_obd_standard_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_1_c_obd_standard_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_1_f_time_since_eng_start_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_1_f_time_since_eng_start_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_1_f_time_since_eng_start_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t obd2_obd2_s1_pid_20_pi_ds_supported_21_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_20_pi_ds_supported_21_40_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_20_pi_ds_supported_21_40_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_21_distance_mil_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_21_distance_mil_on_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_21_distance_mil_on_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_22_fuel_rail_pres_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_22_fuel_rail_pres_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_22_fuel_rail_pres_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_23_fuel_rail_gaug_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_23_fuel_rail_gaug_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_23_fuel_rail_gaug_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_24_oxy_sensor1_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_24_oxy_sensor1_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_24_oxy_sensor1_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_25_oxy_sensor2_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_25_oxy_sensor2_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_25_oxy_sensor2_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_26_oxy_sensor3_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_26_oxy_sensor3_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_26_oxy_sensor3_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_27_oxy_sensor4_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_27_oxy_sensor4_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_27_oxy_sensor4_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_28_oxy_sensor5_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_28_oxy_sensor5_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_28_oxy_sensor5_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_29_oxy_sensor6_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_29_oxy_sensor6_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_29_oxy_sensor6_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_2_a_oxy_sensor7_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_2_a_oxy_sensor7_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_2_a_oxy_sensor7_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_2_b_oxy_sensor8_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_2_b_oxy_sensor8_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_2_b_oxy_sensor8_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_2_c_cmd_egr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_2_c_cmd_egr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_2_c_cmd_egr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_2_d_egr_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_2_d_egr_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_2_d_egr_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_2_e_cmd_evap_purge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_2_e_cmd_evap_purge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_2_e_cmd_evap_purge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_2_f_fuel_tank_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_2_f_fuel_tank_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_2_f_fuel_tank_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_30_warm_ups_since_code_clear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_30_warm_ups_since_code_clear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_30_warm_ups_since_code_clear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_31_distance_since_code_clear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_31_distance_since_code_clear_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_31_distance_since_code_clear_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t obd2_obd2_s1_pid_32_evap_sys_vapor_pres_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_32_evap_sys_vapor_pres_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_32_evap_sys_vapor_pres_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_33_abs_baro_pres_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_33_abs_baro_pres_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_33_abs_baro_pres_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_34_oxy_sensor1_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_34_oxy_sensor1_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_34_oxy_sensor1_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_35_oxy_sensor2_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_35_oxy_sensor2_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_35_oxy_sensor2_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_36_oxy_sensor3_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_36_oxy_sensor3_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_36_oxy_sensor3_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_37_oxy_sensor4_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_37_oxy_sensor4_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_37_oxy_sensor4_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_38_oxy_sensor5_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_38_oxy_sensor5_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_38_oxy_sensor5_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_39_oxy_sensor6_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_39_oxy_sensor6_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_39_oxy_sensor6_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_3_a_oxy_sensor7_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_3_a_oxy_sensor7_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_3_a_oxy_sensor7_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_3_b_oxy_sensor8_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_3_b_oxy_sensor8_faer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_3_b_oxy_sensor8_faer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_3_c_cat_temp_bank1_sens1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_3_c_cat_temp_bank1_sens1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_3_c_cat_temp_bank1_sens1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_3_d_cat_temp_bank2_sens1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_3_d_cat_temp_bank2_sens1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_3_d_cat_temp_bank2_sens1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_3_e_cat_temp_bank1_sens2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_3_e_cat_temp_bank1_sens2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_3_e_cat_temp_bank1_sens2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_3_f_cat_temp_bank2_sens2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_3_f_cat_temp_bank2_sens2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_3_f_cat_temp_bank2_sens2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t obd2_obd2_s1_pid_40_pi_ds_supported_41_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_40_pi_ds_supported_41_60_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_40_pi_ds_supported_41_60_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t obd2_obd2_s1_pid_41_mon_status_drive_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_41_mon_status_drive_cycle_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_41_mon_status_drive_cycle_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_42_control_module_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_42_control_module_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_42_control_module_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_43_abs_load_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_43_abs_load_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_43_abs_load_value_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_44_fuel_air_cmd_equiv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_44_fuel_air_cmd_equiv_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_44_fuel_air_cmd_equiv_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_45_rel_throttle_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_45_rel_throttle_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_45_rel_throttle_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_46_ambient_air_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_46_ambient_air_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_46_ambient_air_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_47_abs_throttle_pos_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_47_abs_throttle_pos_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_47_abs_throttle_pos_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_48_abs_throttle_pos_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_48_abs_throttle_pos_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_48_abs_throttle_pos_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_49_abs_throttle_pos_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_49_abs_throttle_pos_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_49_abs_throttle_pos_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_4_a_abs_throttle_pos_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_4_a_abs_throttle_pos_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_4_a_abs_throttle_pos_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_4_b_abs_throttle_pos_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_4_b_abs_throttle_pos_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_4_b_abs_throttle_pos_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_4_c_cmd_throttle_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_4_c_cmd_throttle_act_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_4_c_cmd_throttle_act_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_4_d_time_run_mil_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_4_d_time_run_mil_on_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_4_d_time_run_mil_on_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_4_e_time_since_code_clear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_4_e_time_since_code_clear_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_4_e_time_since_code_clear_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_4_f_max_faer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_4_f_max_faer_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_4_f_max_faer_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_50_max_air_flow_maf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_50_max_air_flow_maf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_50_max_air_flow_maf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_51_fuel_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_51_fuel_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_51_fuel_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_52_ethanol_fuel_pct_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_52_ethanol_fuel_pct_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_52_ethanol_fuel_pct_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_53_abs_evap_sys_vap_pres_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_53_abs_evap_sys_vap_pres_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_53_abs_evap_sys_vap_pres_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_54_evap_sys_vap_pres_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_54_evap_sys_vap_pres_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_54_evap_sys_vap_pres_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_55_short_sec_oxy_trim_bank1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_55_short_sec_oxy_trim_bank1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_55_short_sec_oxy_trim_bank1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_56_long_sec_oxy_trim_bank1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_56_long_sec_oxy_trim_bank1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_56_long_sec_oxy_trim_bank1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_57_short_sec_oxy_trim_bank2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_57_short_sec_oxy_trim_bank2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_57_short_sec_oxy_trim_bank2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_58_long_sec_oxy_trim_bank2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_58_long_sec_oxy_trim_bank2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_58_long_sec_oxy_trim_bank2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_59_fuel_rail_abs_pres_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_59_fuel_rail_abs_pres_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_59_fuel_rail_abs_pres_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_5_a_rel_accel_pedal_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_5_a_rel_accel_pedal_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_5_a_rel_accel_pedal_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_5_b_hybr_bat_pack_rem_life_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_5_b_hybr_bat_pack_rem_life_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_5_b_hybr_bat_pack_rem_life_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_5_c_engine_oil_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_5_c_engine_oil_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_5_c_engine_oil_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_5_d_fuel_injection_timing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_5_d_fuel_injection_timing_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_5_d_fuel_injection_timing_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_5_e_engine_fuel_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_5_e_engine_fuel_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_5_e_engine_fuel_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_5_f_emission_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_5_f_emission_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_5_f_emission_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t obd2_obd2_s1_pid_60_pi_ds_supported_61_80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_60_pi_ds_supported_61_80_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_60_pi_ds_supported_61_80_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_61_demand_eng_torq_pct_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_61_demand_eng_torq_pct_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_61_demand_eng_torq_pct_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_62_actual_eng_torq_pct_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_62_actual_eng_torq_pct_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_62_actual_eng_torq_pct_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_63_eng_ref_torq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_63_eng_ref_torq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_63_eng_ref_torq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_64_eng_pct_torq_idle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_64_eng_pct_torq_idle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_64_eng_pct_torq_idle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_65_aux_input_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_65_aux_input_output_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_65_aux_input_output_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_66_maf_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_66_maf_sensor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_66_maf_sensor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_67_engine_coolant_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_67_engine_coolant_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_67_engine_coolant_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_68_intake_air_temp_sens_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_68_intake_air_temp_sens_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_68_intake_air_temp_sens_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_69_cmd_egr_egr_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_69_cmd_egr_egr_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_69_cmd_egr_egr_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_6_a_cmd_diesel_int_air_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_6_a_cmd_diesel_int_air_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_6_a_cmd_diesel_int_air_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_6_b_exhaust_gas_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_6_b_exhaust_gas_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_6_b_exhaust_gas_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_6_c_cmd_throttle_act_rel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_6_c_cmd_throttle_act_rel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_6_c_cmd_throttle_act_rel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_6_d_fuel_pres_contr_sys_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_6_d_fuel_pres_contr_sys_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_6_d_fuel_pres_contr_sys_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_6_e_inj_pres_contr_sys_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_6_e_inj_pres_contr_sys_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_6_e_inj_pres_contr_sys_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_6_f_turbo_compr_pres_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_6_f_turbo_compr_pres_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_6_f_turbo_compr_pres_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_70_boost_pres_cntrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_70_boost_pres_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_70_boost_pres_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t obd2_obd2_s1_pid_80_pi_ds_supported_81_a0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_80_pi_ds_supported_81_a0_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_80_pi_ds_supported_81_a0_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_8_e_eng_friction_pct_torq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_8_e_eng_friction_pct_torq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_8_e_eng_friction_pct_torq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t obd2_obd2_s1_pid_a0_pi_ds_supported_a1_c0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_a0_pi_ds_supported_a1_c0_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_a0_pi_ds_supported_a1_c0_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t obd2_obd2_s1_pid_c0_pi_ds_supported_c1_e0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_c0_pi_ds_supported_c1_e0_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_c0_pi_ds_supported_c1_e0_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s2_pid_02_freeze_dtc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s2_pid_02_freeze_dtc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s2_pid_02_freeze_dtc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_14_oxy_sensor1_stft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_14_oxy_sensor1_stft_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_14_oxy_sensor1_stft_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_15_oxy_sensor2_stft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_15_oxy_sensor2_stft_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_15_oxy_sensor2_stft_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_16_oxy_sensor3_stft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_16_oxy_sensor3_stft_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_16_oxy_sensor3_stft_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_17_oxy_sensor4_stft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_17_oxy_sensor4_stft_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_17_oxy_sensor4_stft_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_18_oxy_sensor5_stft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_18_oxy_sensor5_stft_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_18_oxy_sensor5_stft_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_19_oxy_sensor6_stft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_19_oxy_sensor6_stft_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_19_oxy_sensor6_stft_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_1_a_oxy_sensor7_stft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_1_a_oxy_sensor7_stft_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_1_a_oxy_sensor7_stft_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_1_b_oxy_sensor8_stft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_1_b_oxy_sensor8_stft_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_1_b_oxy_sensor8_stft_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_4_f_max_oxy_sens_vol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_4_f_max_oxy_sens_vol_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_4_f_max_oxy_sens_vol_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_55_short_sec_oxy_trim_bank3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_55_short_sec_oxy_trim_bank3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_55_short_sec_oxy_trim_bank3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_56_long_sec_oxy_trim_bank3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_56_long_sec_oxy_trim_bank3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_56_long_sec_oxy_trim_bank3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_57_short_sec_oxy_trim_bank4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_57_short_sec_oxy_trim_bank4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_57_short_sec_oxy_trim_bank4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_58_long_sec_oxy_trim_bank4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_58_long_sec_oxy_trim_bank4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_58_long_sec_oxy_trim_bank4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_64_eng_pct_torq_ep1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_64_eng_pct_torq_ep1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_64_eng_pct_torq_ep1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_24_oxy_sensor1_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_24_oxy_sensor1_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_24_oxy_sensor1_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_25_oxy_sensor2_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_25_oxy_sensor2_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_25_oxy_sensor2_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_26_oxy_sensor3_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_26_oxy_sensor3_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_26_oxy_sensor3_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_27_oxy_sensor4_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_27_oxy_sensor4_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_27_oxy_sensor4_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_28_oxy_sensor5_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_28_oxy_sensor5_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_28_oxy_sensor5_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_29_oxy_sensor6_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_29_oxy_sensor6_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_29_oxy_sensor6_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_2_a_oxy_sensor7_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_2_a_oxy_sensor7_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_2_a_oxy_sensor7_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_2_b_oxy_sensor8_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_2_b_oxy_sensor8_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_2_b_oxy_sensor8_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_34_oxy_sensor1_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_34_oxy_sensor1_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_34_oxy_sensor1_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_35_oxy_sensor2_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_35_oxy_sensor2_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_35_oxy_sensor2_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_36_oxy_sensor3_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_36_oxy_sensor3_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_36_oxy_sensor3_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_37_oxy_sensor4_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_37_oxy_sensor4_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_37_oxy_sensor4_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_38_oxy_sensor5_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_38_oxy_sensor5_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_38_oxy_sensor5_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_39_oxy_sensor6_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_39_oxy_sensor6_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_39_oxy_sensor6_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_3_a_oxy_sensor7_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_3_a_oxy_sensor7_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_3_a_oxy_sensor7_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t obd2_obd2_s1_pid_3_b_oxy_sensor8_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_3_b_oxy_sensor8_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_3_b_oxy_sensor8_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_4_f_max_oxy_sens_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_4_f_max_oxy_sens_crnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_4_f_max_oxy_sens_crnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_64_eng_pct_torq_ep2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_64_eng_pct_torq_ep2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_64_eng_pct_torq_ep2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_4_f_max_int_mani_abs_pres_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_4_f_max_int_mani_abs_pres_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_4_f_max_int_mani_abs_pres_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_64_eng_pct_torq_ep3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_64_eng_pct_torq_ep3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_64_eng_pct_torq_ep3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t obd2_obd2_s1_pid_64_eng_pct_torq_ep4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double obd2_obd2_s1_pid_64_eng_pct_torq_ep4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool obd2_obd2_s1_pid_64_eng_pct_torq_ep4_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
