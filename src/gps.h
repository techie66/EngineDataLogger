/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.7 Sun Jun  5 19:13:16 2022.
 */

#ifndef GPS_H
#define GPS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define GPS_GPS_TIME_FRAME_ID (0x1800u)
#define GPS_GPS_LOC_FRAME_ID (0x1801u)
#define GPS_GPS_NAV_FRAME_ID (0x1802u)
#define GPS_GPS_STAT_FRAME_ID (0x1803u)

/* Frame lengths in bytes. */
#define GPS_GPS_TIME_LENGTH (8u)
#define GPS_GPS_LOC_LENGTH (8u)
#define GPS_GPS_NAV_LENGTH (8u)
#define GPS_GPS_STAT_LENGTH (8u)

/* Extended or standard frame types. */
#define GPS_GPS_TIME_IS_EXTENDED (1)
#define GPS_GPS_LOC_IS_EXTENDED (1)
#define GPS_GPS_NAV_IS_EXTENDED (1)
#define GPS_GPS_STAT_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */
#define GPS_GPS_TIME_CYCLE_TIME_MS (1000u)
#define GPS_GPS_LOC_CYCLE_TIME_MS (1000u)
#define GPS_GPS_NAV_CYCLE_TIME_MS (1000u)
#define GPS_GPS_STAT_CYCLE_TIME_MS (1000u)

/* Signal choices. */


/**
 * Signals in message GPS_Time.
 *
 * All signal values are as on the CAN bus.
 */
struct gps_gps_time_t {
    /**
     * Range: 1..31 (1..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t day;

    /**
     * Range: 1..12 (1..12 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t month;

    /**
     * Range: 1..65535 (1..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t year;

    /**
     * Range: 0..23 (0..23 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hour;

    /**
     * Range: 0..59 (0..59 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t minute;

    /**
     * Range: 0..59 (0..59 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t second;
};

/**
 * Signals in message GPS_Loc.
 *
 * All signal values are as on the CAN bus.
 */
struct gps_gps_loc_t {
    /**
     * Range: 0..180000000 (-90..90 Deg)
     * Scale: 1e-06
     * Offset: -90
     */
    uint32_t lat_decimal_degrees;

    /**
     * Range: 0..360000000 (-180..180 Deg)
     * Scale: 1e-06
     * Offset: -180
     */
    uint32_t long_decimal_degrees;
};

/**
 * Signals in message GPS_Nav.
 *
 * All signal values are as on the CAN bus.
 */
struct gps_gps_nav_t {
    /**
     * Range: 0..655350 (0..65535 km/h)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t speed;

    /**
     * Range: 0..35990 (0..3599 Deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t heading;

    /**
     * Range: 0..65535 (0..65535 m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t altitude;
};

/**
 * Signals in message GPS_Stat.
 *
 * All signal values are as on the CAN bus.
 */
struct gps_gps_stat_t {
    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_satellites;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t type;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t visible_satellites;

    /**
     * Range: 0..99990 (0..9999 m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pdop;

    /**
     * Range: 0..99990 (0..9999 m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t hdop;

    /**
     * Range: 0..99990 (0..9999 m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vdop;
};

/**
 * Pack message GPS_Time.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int gps_gps_time_pack(
    uint8_t *dst_p,
    const struct gps_gps_time_t *src_p,
    size_t size);

/**
 * Unpack message GPS_Time.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int gps_gps_time_unpack(
    struct gps_gps_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t gps_gps_time_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_time_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_time_day_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t gps_gps_time_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_time_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_time_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t gps_gps_time_year_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_time_year_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_time_year_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t gps_gps_time_hour_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_time_hour_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_time_hour_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t gps_gps_time_minute_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_time_minute_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_time_minute_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t gps_gps_time_second_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_time_second_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_time_second_is_in_range(uint8_t value);

/**
 * Pack message GPS_Loc.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int gps_gps_loc_pack(
    uint8_t *dst_p,
    const struct gps_gps_loc_t *src_p,
    size_t size);

/**
 * Unpack message GPS_Loc.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int gps_gps_loc_unpack(
    struct gps_gps_loc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t gps_gps_loc_lat_decimal_degrees_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_loc_lat_decimal_degrees_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_loc_lat_decimal_degrees_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t gps_gps_loc_long_decimal_degrees_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_loc_long_decimal_degrees_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_loc_long_decimal_degrees_is_in_range(uint32_t value);

/**
 * Pack message GPS_Nav.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int gps_gps_nav_pack(
    uint8_t *dst_p,
    const struct gps_gps_nav_t *src_p,
    size_t size);

/**
 * Unpack message GPS_Nav.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int gps_gps_nav_unpack(
    struct gps_gps_nav_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t gps_gps_nav_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_nav_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_nav_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t gps_gps_nav_heading_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_nav_heading_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_nav_heading_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t gps_gps_nav_altitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_nav_altitude_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_nav_altitude_is_in_range(uint16_t value);

/**
 * Pack message GPS_Stat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int gps_gps_stat_pack(
    uint8_t *dst_p,
    const struct gps_gps_stat_t *src_p,
    size_t size);

/**
 * Unpack message GPS_Stat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int gps_gps_stat_unpack(
    struct gps_gps_stat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t gps_gps_stat_active_satellites_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_stat_active_satellites_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_stat_active_satellites_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t gps_gps_stat_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_stat_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_stat_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t gps_gps_stat_visible_satellites_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_stat_visible_satellites_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_stat_visible_satellites_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t gps_gps_stat_pdop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_stat_pdop_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_stat_pdop_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t gps_gps_stat_hdop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_stat_hdop_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_stat_hdop_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t gps_gps_stat_vdop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double gps_gps_stat_vdop_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool gps_gps_stat_vdop_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
