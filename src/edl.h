/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Tue Mar  5 18:30:05 2024.
 */

#ifndef EDL_H
#define EDL_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define EDL_EDL_FRAME_ID (0x226u)
#define EDL_ENGINE1_FRAME_ID (0x227u)
#define EDL_ENGINE2_FRAME_ID (0x228u)
#define EDL_ENGINE3_FRAME_ID (0x229u)

/* Frame lengths in bytes. */
#define EDL_EDL_LENGTH (4u)
#define EDL_ENGINE1_LENGTH (8u)
#define EDL_ENGINE2_LENGTH (8u)
#define EDL_ENGINE3_LENGTH (8u)

/* Extended or standard frame types. */
#define EDL_EDL_IS_EXTENDED (0)
#define EDL_ENGINE1_IS_EXTENDED (0)
#define EDL_ENGINE2_IS_EXTENDED (0)
#define EDL_ENGINE3_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define EDL_EDL_NAME "EDL"
#define EDL_ENGINE1_NAME "ENGINE1"
#define EDL_ENGINE2_NAME "ENGINE2"
#define EDL_ENGINE3_NAME "ENGINE3"

/* Signal Names. */
#define EDL_EDL_CMD_A_NAME "cmd_A"
#define EDL_ENGINE1_RPM_NAME "RPM"
#define EDL_ENGINE1_SPEED_MPH_NAME "SPEED_MPH"
#define EDL_ENGINE1_TPS_NAME "TPS"
#define EDL_ENGINE1_OIL_TEMP_NAME "OIL_TEMP"
#define EDL_ENGINE1_OIL_PRES_NAME "OIL_PRES"
#define EDL_ENGINE1_IAP_NAME "IAP"
#define EDL_ENGINE1_VOLTAGE_NAME "VOLTAGE"
#define EDL_ENGINE2_ODO_NAME "ODO"
#define EDL_ENGINE2_TRIP_NAME "TRIP"
#define EDL_ENGINE2_LAMBDA_NAME "LAMBDA"
#define EDL_ENGINE2_GEAR_NAME "GEAR"
#define EDL_ENGINE3_ADV_NAME "ADV"
#define EDL_ENGINE3_ROLL_ANGLE_NAME "Roll_angle"
#define EDL_ENGINE3_PITCH_ANGLE_NAME "Pitch_angle"
#define EDL_ENGINE3_YAW_ANGLE_NAME "Yaw_angle"

/**
 * Signals in message EDL.
 *
 * All signal values are as on the CAN bus.
 */
struct edl_edl_t {
  /**
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t cmd_a;
};

/**
 * Signals in message ENGINE1.
 *
 * EDL Engine Frame 1
 *
 * All signal values are as on the CAN bus.
 */
struct edl_engine1_t {
  /**
   * RPM
   *
   * Range: 0..65535 (0..65535 rpm)
   * Scale: 1
   * Offset: 0
   */
  uint16_t rpm;

  /**
   * Speed (MPH)
   *
   * Range: 0..255 (0..255 MPH)
   * Scale: 1
   * Offset: 0
   */
  uint8_t speed_mph;

  /**
   * Throttle position (%)
   *
   * Range: 0..100 (0..100 %)
   * Scale: 1
   * Offset: 0
   */
  uint8_t tps;

  /**
   * Engine oil temp (Fahrenheit)
   *
   * Range: 0..500 (-50..450 F)
   * Scale: 1
   * Offset: -50
   */
  uint16_t oil_temp;

  /**
   * Engine oil pressure (psi)
   *
   * Range: 0..255 (0..255 psi)
   * Scale: 1
   * Offset: 0
   */
  uint8_t oil_pres;

  /**
   * Intake absolute pressure (kpa)
   *
   * Range: 0..255 (0..255 kpa)
   * Scale: 1
   * Offset: 0
   */
  uint8_t iap;

  /**
   * System Voltage (0.1 V)
   *
   * Range: 0..255 (0..25.5 V)
   * Scale: 0.1
   * Offset: 0
   */
  uint8_t voltage;
};

/**
 * Signals in message ENGINE2.
 *
 * EDL Engine Frame 2
 *
 * All signal values are as on the CAN bus.
 */
struct edl_engine2_t {
  /**
   * Odometer (0.1 mi)
   *
   * Range: 0..16777210 (0..1677721.0 mi)
   * Scale: 0.1
   * Offset: 0
   */
  uint32_t odo;

  /**
   * Tripmeter (0.1 mi)
   *
   * Range: 0..1048570 (0..104857.0 mi)
   * Scale: 0.1
   * Offset: 0
   */
  uint32_t trip;

  /**
   * Lambda
   *
   * Range: 0..2048 (0..2.048 -)
   * Scale: 0.001
   * Offset: 0
   */
  uint16_t lambda;

  /**
   * character representing current gear
   *
   * Range: 0..255 (0..255 char)
   * Scale: 1
   * Offset: 0
   */
  uint8_t gear;
};

/**
 * Signals in message ENGINE3.
 *
 * EDL Engine Frame 3
 *
 * All signal values are as on the CAN bus.
 */
struct edl_engine3_t {
  /**
   * Ignition advance
   *
   * Range: 0..255 (0..255 deg)
   * Scale: 1
   * Offset: 0
   */
  uint8_t adv;

  /**
   * Body roll angle (deg)
   *
   * Range: 0..3600 (-180..180 deg)
   * Scale: 0.1
   * Offset: -180
   */
  uint16_t roll_angle;

  /**
   * Body pitch angle (deg)
   *
   * Range: 0..3600 (-180..180 deg)
   * Scale: 0.1
   * Offset: -180
   */
  uint16_t pitch_angle;

  /**
   * Body yaw angle (deg)
   *
   * Range: 0..7200 (-360..360 deg)
   * Scale: 0.1
   * Offset: -360
   */
  uint16_t yaw_angle;
};

/**
 * Pack message EDL.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int edl_edl_pack(
  uint8_t *dst_p,
  const struct edl_edl_t *src_p,
  size_t size);

/**
 * Unpack message EDL.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int edl_edl_unpack(
  struct edl_edl_t *dst_p,
  const uint8_t *src_p,
  size_t size);

/**
 * Init message fields to default values from EDL.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int edl_edl_init(struct edl_edl_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t edl_edl_cmd_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_edl_cmd_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_edl_cmd_a_is_in_range(uint8_t value);

/**
 * Pack message ENGINE1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int edl_engine1_pack(
  uint8_t *dst_p,
  const struct edl_engine1_t *src_p,
  size_t size);

/**
 * Unpack message ENGINE1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int edl_engine1_unpack(
  struct edl_engine1_t *dst_p,
  const uint8_t *src_p,
  size_t size);

/**
 * Init message fields to default values from ENGINE1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int edl_engine1_init(struct edl_engine1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t edl_engine1_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine1_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine1_rpm_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t edl_engine1_speed_mph_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine1_speed_mph_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine1_speed_mph_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t edl_engine1_tps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine1_tps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine1_tps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t edl_engine1_oil_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine1_oil_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine1_oil_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t edl_engine1_oil_pres_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine1_oil_pres_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine1_oil_pres_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t edl_engine1_iap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine1_iap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine1_iap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t edl_engine1_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine1_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine1_voltage_is_in_range(uint8_t value);

/**
 * Pack message ENGINE2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int edl_engine2_pack(
  uint8_t *dst_p,
  const struct edl_engine2_t *src_p,
  size_t size);

/**
 * Unpack message ENGINE2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int edl_engine2_unpack(
  struct edl_engine2_t *dst_p,
  const uint8_t *src_p,
  size_t size);

/**
 * Init message fields to default values from ENGINE2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int edl_engine2_init(struct edl_engine2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t edl_engine2_odo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine2_odo_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine2_odo_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t edl_engine2_trip_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine2_trip_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine2_trip_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t edl_engine2_lambda_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine2_lambda_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine2_lambda_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t edl_engine2_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine2_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine2_gear_is_in_range(uint8_t value);

/**
 * Pack message ENGINE3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int edl_engine3_pack(
  uint8_t *dst_p,
  const struct edl_engine3_t *src_p,
  size_t size);

/**
 * Unpack message ENGINE3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int edl_engine3_unpack(
  struct edl_engine3_t *dst_p,
  const uint8_t *src_p,
  size_t size);

/**
 * Init message fields to default values from ENGINE3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int edl_engine3_init(struct edl_engine3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t edl_engine3_adv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine3_adv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine3_adv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t edl_engine3_roll_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine3_roll_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine3_roll_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t edl_engine3_pitch_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine3_pitch_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine3_pitch_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t edl_engine3_yaw_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double edl_engine3_yaw_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool edl_engine3_yaw_angle_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
