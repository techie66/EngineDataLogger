.TH "src/cmdline.h" 3 "Mon Jul 18 2022" "Version v0.1" "Engine Data Logger (EDL)" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/cmdline.h \- The header file for the command line option parser generated by GNU Gengetopt version 2\&.23 http://www.gnu.org/software/gengetopt\&. DO NOT modify this file, since it can be overwritten\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBgengetopt_args_info\fP"
.br
.RI "Where the command line options are stored\&. "
.ti -1c
.RI "struct \fBcmdline_parser_params\fP"
.br
.RI "The additional parameters to pass to parser functions\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCMDLINE_PARSER_PACKAGE\fP   PACKAGE"
.br
.RI "the program name (used for printing errors) "
.ti -1c
.RI "#define \fBCMDLINE_PARSER_PACKAGE_NAME\fP   PACKAGE"
.br
.RI "the complete program name (used for help and version) "
.ti -1c
.RI "#define \fBCMDLINE_PARSER_VERSION\fP   VERSION"
.br
.RI "the program version "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBenum_verbose\fP { \fBverbose__NULL\fP = -1, \fBverbose_arg_NONE\fP = 0, \fBverbose_arg_ERROR\fP, \fBverbose_arg_WARN\fP, \fBverbose_arg_INFO\fP, \fBverbose_arg_DEBUG\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBcmdline_parser\fP (int argc, char **argv, struct \fBgengetopt_args_info\fP *args_info)"
.br
.ti -1c
.RI "int \fBcmdline_parser2\fP (int argc, char **argv, struct \fBgengetopt_args_info\fP *args_info, int override, int initialize, int check_required)"
.br
.ti -1c
.RI "int \fBcmdline_parser_ext\fP (int argc, char **argv, struct \fBgengetopt_args_info\fP *args_info, struct \fBcmdline_parser_params\fP *params)"
.br
.ti -1c
.RI "int \fBcmdline_parser_dump\fP (FILE *outfile, struct \fBgengetopt_args_info\fP *args_info)"
.br
.ti -1c
.RI "int \fBcmdline_parser_file_save\fP (const char *filename, struct \fBgengetopt_args_info\fP *args_info)"
.br
.ti -1c
.RI "void \fBcmdline_parser_print_help\fP (void)"
.br
.ti -1c
.RI "void \fBcmdline_parser_print_detailed_help\fP (void)"
.br
.ti -1c
.RI "void \fBcmdline_parser_print_version\fP (void)"
.br
.ti -1c
.RI "void \fBcmdline_parser_params_init\fP (struct \fBcmdline_parser_params\fP *params)"
.br
.ti -1c
.RI "struct \fBcmdline_parser_params\fP * \fBcmdline_parser_params_create\fP (void)"
.br
.ti -1c
.RI "void \fBcmdline_parser_init\fP (struct \fBgengetopt_args_info\fP *args_info)"
.br
.ti -1c
.RI "void \fBcmdline_parser_free\fP (struct \fBgengetopt_args_info\fP *args_info)"
.br
.ti -1c
.RI "int \fBcmdline_parser_configfile\fP (const char *filename, struct \fBgengetopt_args_info\fP *args_info, int override, int initialize, int check_required)"
.br
.ti -1c
.RI "int \fBcmdline_parser_config_file\fP (const char *filename, struct \fBgengetopt_args_info\fP *args_info, struct \fBcmdline_parser_params\fP *params)"
.br
.ti -1c
.RI "int \fBcmdline_parser_required\fP (struct \fBgengetopt_args_info\fP *args_info, const char *prog_name)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const char * \fBgengetopt_args_info_purpose\fP"
.br
.RI "the purpose string of the program "
.ti -1c
.RI "const char * \fBgengetopt_args_info_usage\fP"
.br
.RI "the usage string of the program "
.ti -1c
.RI "const char * \fBgengetopt_args_info_description\fP"
.br
.RI "the description string of the program "
.ti -1c
.RI "const char * \fBgengetopt_args_info_help\fP []"
.br
.RI "all the lines making the help output "
.ti -1c
.RI "const char * \fBgengetopt_args_info_detailed_help\fP []"
.br
.RI "all the lines making the detailed help output (including hidden options and details) "
.ti -1c
.RI "const char * \fBcmdline_parser_verbose_values\fP []"
.br
.RI "Possible values for verbose\&. "
.in -1c
.SH "Detailed Description"
.PP 
The header file for the command line option parser generated by GNU Gengetopt version 2\&.23 http://www.gnu.org/software/gengetopt\&. DO NOT modify this file, since it can be overwritten\&. 


.PP
\fBAuthor\fP
.RS 4
GNU Gengetopt 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "int cmdline_parser (int argc, char ** argv, struct \fBgengetopt_args_info\fP * args_info)"
The command line parser 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP the number of command line options 
.br
\fIargv\fP the command line options 
.br
\fIargs_info\fP the structure where option information will be stored 
.RE
.PP
\fBReturns\fP
.RS 4
0 if everything went fine, NON 0 if an error took place 
.RE
.PP

.SS "int cmdline_parser2 (int argc, char ** argv, struct \fBgengetopt_args_info\fP * args_info, int override, int initialize, int check_required)"
The command line parser (version with additional parameters - deprecated) 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP the number of command line options 
.br
\fIargv\fP the command line options 
.br
\fIargs_info\fP the structure where option information will be stored 
.br
\fIoverride\fP whether to override possibly already present options 
.br
\fIinitialize\fP whether to initialize the option structure my_args_info 
.br
\fIcheck_required\fP whether to check that all required options were provided 
.RE
.PP
\fBReturns\fP
.RS 4
0 if everything went fine, NON 0 if an error took place 
.RE
.PP
\fBDeprecated\fP
.RS 4
use \fBcmdline_parser_ext()\fP instead 
.RE
.PP

.SS "int cmdline_parser_config_file (const char * filename, struct \fBgengetopt_args_info\fP * args_info, struct \fBcmdline_parser_params\fP * params)"
The config file parser 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP the name of the config file 
.br
\fIargs_info\fP the structure where option information will be stored 
.br
\fIparams\fP additional parameters for the parser 
.RE
.PP
\fBReturns\fP
.RS 4
0 if everything went fine, NON 0 if an error took place 
.RE
.PP

.SS "int cmdline_parser_configfile (const char * filename, struct \fBgengetopt_args_info\fP * args_info, int override, int initialize, int check_required)"
The config file parser (deprecated version) 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP the name of the config file 
.br
\fIargs_info\fP the structure where option information will be stored 
.br
\fIoverride\fP whether to override possibly already present options 
.br
\fIinitialize\fP whether to initialize the option structure my_args_info 
.br
\fIcheck_required\fP whether to check that all required options were provided 
.RE
.PP
\fBReturns\fP
.RS 4
0 if everything went fine, NON 0 if an error took place 
.RE
.PP
\fBDeprecated\fP
.RS 4
use \fBcmdline_parser_config_file()\fP instead 
.RE
.PP

.SS "int cmdline_parser_dump (FILE * outfile, struct \fBgengetopt_args_info\fP * args_info)"
Save the contents of the option struct into an already open FILE stream\&. 
.PP
\fBParameters\fP
.RS 4
\fIoutfile\fP the stream where to dump options 
.br
\fIargs_info\fP the option struct to dump 
.RE
.PP
\fBReturns\fP
.RS 4
0 if everything went fine, NON 0 if an error took place 
.RE
.PP

.SS "int cmdline_parser_ext (int argc, char ** argv, struct \fBgengetopt_args_info\fP * args_info, struct \fBcmdline_parser_params\fP * params)"
The command line parser (version with additional parameters) 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP the number of command line options 
.br
\fIargv\fP the command line options 
.br
\fIargs_info\fP the structure where option information will be stored 
.br
\fIparams\fP additional parameters for the parser 
.RE
.PP
\fBReturns\fP
.RS 4
0 if everything went fine, NON 0 if an error took place 
.RE
.PP

.SS "int cmdline_parser_file_save (const char * filename, struct \fBgengetopt_args_info\fP * args_info)"
Save the contents of the option struct into a (text) file\&. This file can be read by the config file parser (if generated by gengetopt) 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP the file where to save 
.br
\fIargs_info\fP the option struct to save 
.RE
.PP
\fBReturns\fP
.RS 4
0 if everything went fine, NON 0 if an error took place 
.RE
.PP

.SS "void cmdline_parser_free (struct \fBgengetopt_args_info\fP * args_info)"
Deallocates the string fields of the \fBgengetopt_args_info\fP structure (but does not deallocate the structure itself) 
.PP
\fBParameters\fP
.RS 4
\fIargs_info\fP the structure to deallocate 
.RE
.PP

.SS "void cmdline_parser_init (struct \fBgengetopt_args_info\fP * args_info)"
Initializes the passed \fBgengetopt_args_info\fP structure's fields (also set default values for options that have a default) 
.PP
\fBParameters\fP
.RS 4
\fIargs_info\fP the structure to initialize 
.RE
.PP

.SS "struct \fBcmdline_parser_params\fP* cmdline_parser_params_create (void)"
Allocates dynamically a \fBcmdline_parser_params\fP structure and initializes all its fields to their default values 
.PP
\fBReturns\fP
.RS 4
the created and initialized \fBcmdline_parser_params\fP structure 
.RE
.PP

.SS "void cmdline_parser_params_init (struct \fBcmdline_parser_params\fP * params)"
Initializes all the fields a \fBcmdline_parser_params\fP structure to their default values 
.PP
\fBParameters\fP
.RS 4
\fIparams\fP the structure to initialize 
.RE
.PP

.SS "void cmdline_parser_print_detailed_help (void)"
Print the detailed help (including hidden options and details) 
.SS "void cmdline_parser_print_help (void)"
Print the help 
.SS "void cmdline_parser_print_version (void)"
Print the version 
.SS "int cmdline_parser_required (struct \fBgengetopt_args_info\fP * args_info, const char * prog_name)"
Checks that all the required options were specified 
.PP
\fBParameters\fP
.RS 4
\fIargs_info\fP the structure to check 
.br
\fIprog_name\fP the name of the program that will be used to print possible errors 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Engine Data Logger (EDL) from the source code\&.
