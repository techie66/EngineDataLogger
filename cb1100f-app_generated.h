// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CB1100FAPP_EDL_APPBUFFER_H_
#define FLATBUFFERS_GENERATED_CB1100FAPP_EDL_APPBUFFER_H_

#include "flatbuffers/flatbuffers.h"

namespace EDL {
namespace AppBuffer {

struct Bike;
struct BikeT;

struct BikeT : public flatbuffers::NativeTable {
  typedef Bike TableType;
  int32_t rpm;
  float speed;
  uint32_t odometer;
  uint32_t trip;
  float systemvoltage;
  float batteryvoltage;
  float oil_temp;
  bool blink_left;
  bool blink_right;
  BikeT()
      : rpm(0),
        speed(0.0f),
        odometer(0),
        trip(0),
        systemvoltage(0.0f),
        batteryvoltage(0.0f),
        oil_temp(0.0f),
        blink_left(false),
        blink_right(false) {
  }
};

struct Bike FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BikeT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RPM = 4,
    VT_SPEED = 6,
    VT_ODOMETER = 8,
    VT_TRIP = 10,
    VT_SYSTEMVOLTAGE = 12,
    VT_BATTERYVOLTAGE = 14,
    VT_OIL_TEMP = 16,
    VT_BLINK_LEFT = 18,
    VT_BLINK_RIGHT = 20
  };
  int32_t rpm() const {
    return GetField<int32_t>(VT_RPM, 0);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  uint32_t odometer() const {
    return GetField<uint32_t>(VT_ODOMETER, 0);
  }
  uint32_t trip() const {
    return GetField<uint32_t>(VT_TRIP, 0);
  }
  float systemvoltage() const {
    return GetField<float>(VT_SYSTEMVOLTAGE, 0.0f);
  }
  float batteryvoltage() const {
    return GetField<float>(VT_BATTERYVOLTAGE, 0.0f);
  }
  float oil_temp() const {
    return GetField<float>(VT_OIL_TEMP, 0.0f);
  }
  bool blink_left() const {
    return GetField<uint8_t>(VT_BLINK_LEFT, 0) != 0;
  }
  bool blink_right() const {
    return GetField<uint8_t>(VT_BLINK_RIGHT, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RPM) &&
           VerifyField<float>(verifier, VT_SPEED) &&
           VerifyField<uint32_t>(verifier, VT_ODOMETER) &&
           VerifyField<uint32_t>(verifier, VT_TRIP) &&
           VerifyField<float>(verifier, VT_SYSTEMVOLTAGE) &&
           VerifyField<float>(verifier, VT_BATTERYVOLTAGE) &&
           VerifyField<float>(verifier, VT_OIL_TEMP) &&
           VerifyField<uint8_t>(verifier, VT_BLINK_LEFT) &&
           VerifyField<uint8_t>(verifier, VT_BLINK_RIGHT) &&
           verifier.EndTable();
  }
  BikeT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BikeT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Bike> Pack(flatbuffers::FlatBufferBuilder &_fbb, const BikeT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BikeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rpm(int32_t rpm) {
    fbb_.AddElement<int32_t>(Bike::VT_RPM, rpm, 0);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(Bike::VT_SPEED, speed, 0.0f);
  }
  void add_odometer(uint32_t odometer) {
    fbb_.AddElement<uint32_t>(Bike::VT_ODOMETER, odometer, 0);
  }
  void add_trip(uint32_t trip) {
    fbb_.AddElement<uint32_t>(Bike::VT_TRIP, trip, 0);
  }
  void add_systemvoltage(float systemvoltage) {
    fbb_.AddElement<float>(Bike::VT_SYSTEMVOLTAGE, systemvoltage, 0.0f);
  }
  void add_batteryvoltage(float batteryvoltage) {
    fbb_.AddElement<float>(Bike::VT_BATTERYVOLTAGE, batteryvoltage, 0.0f);
  }
  void add_oil_temp(float oil_temp) {
    fbb_.AddElement<float>(Bike::VT_OIL_TEMP, oil_temp, 0.0f);
  }
  void add_blink_left(bool blink_left) {
    fbb_.AddElement<uint8_t>(Bike::VT_BLINK_LEFT, static_cast<uint8_t>(blink_left), 0);
  }
  void add_blink_right(bool blink_right) {
    fbb_.AddElement<uint8_t>(Bike::VT_BLINK_RIGHT, static_cast<uint8_t>(blink_right), 0);
  }
  explicit BikeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BikeBuilder &operator=(const BikeBuilder &);
  flatbuffers::Offset<Bike> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Bike>(end);
    return o;
  }
};

inline flatbuffers::Offset<Bike> CreateBike(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t rpm = 0,
    float speed = 0.0f,
    uint32_t odometer = 0,
    uint32_t trip = 0,
    float systemvoltage = 0.0f,
    float batteryvoltage = 0.0f,
    float oil_temp = 0.0f,
    bool blink_left = false,
    bool blink_right = false) {
  BikeBuilder builder_(_fbb);
  builder_.add_oil_temp(oil_temp);
  builder_.add_batteryvoltage(batteryvoltage);
  builder_.add_systemvoltage(systemvoltage);
  builder_.add_trip(trip);
  builder_.add_odometer(odometer);
  builder_.add_speed(speed);
  builder_.add_rpm(rpm);
  builder_.add_blink_right(blink_right);
  builder_.add_blink_left(blink_left);
  return builder_.Finish();
}

flatbuffers::Offset<Bike> CreateBike(flatbuffers::FlatBufferBuilder &_fbb, const BikeT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline BikeT *Bike::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new BikeT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Bike::UnPackTo(BikeT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = rpm(); _o->rpm = _e; };
  { auto _e = speed(); _o->speed = _e; };
  { auto _e = odometer(); _o->odometer = _e; };
  { auto _e = trip(); _o->trip = _e; };
  { auto _e = systemvoltage(); _o->systemvoltage = _e; };
  { auto _e = batteryvoltage(); _o->batteryvoltage = _e; };
  { auto _e = oil_temp(); _o->oil_temp = _e; };
  { auto _e = blink_left(); _o->blink_left = _e; };
  { auto _e = blink_right(); _o->blink_right = _e; };
}

inline flatbuffers::Offset<Bike> Bike::Pack(flatbuffers::FlatBufferBuilder &_fbb, const BikeT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBike(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Bike> CreateBike(flatbuffers::FlatBufferBuilder &_fbb, const BikeT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const BikeT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _rpm = _o->rpm;
  auto _speed = _o->speed;
  auto _odometer = _o->odometer;
  auto _trip = _o->trip;
  auto _systemvoltage = _o->systemvoltage;
  auto _batteryvoltage = _o->batteryvoltage;
  auto _oil_temp = _o->oil_temp;
  auto _blink_left = _o->blink_left;
  auto _blink_right = _o->blink_right;
  return EDL::AppBuffer::CreateBike(
      _fbb,
      _rpm,
      _speed,
      _odometer,
      _trip,
      _systemvoltage,
      _batteryvoltage,
      _oil_temp,
      _blink_left,
      _blink_right);
}

inline const EDL::AppBuffer::Bike *GetBike(const void *buf) {
  return flatbuffers::GetRoot<EDL::AppBuffer::Bike>(buf);
}

inline const EDL::AppBuffer::Bike *GetSizePrefixedBike(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<EDL::AppBuffer::Bike>(buf);
}

inline bool VerifyBikeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EDL::AppBuffer::Bike>(nullptr);
}

inline bool VerifySizePrefixedBikeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EDL::AppBuffer::Bike>(nullptr);
}

inline void FinishBikeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<EDL::AppBuffer::Bike> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBikeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<EDL::AppBuffer::Bike> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<BikeT> UnPackBike(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<BikeT>(GetBike(buf)->UnPack(res));
}

}  // namespace AppBuffer
}  // namespace EDL

#endif  // FLATBUFFERS_GENERATED_CB1100FAPP_EDL_APPBUFFER_H_
